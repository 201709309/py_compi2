/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xQueryGrammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,9],$V2=[1,14],$V3=[1,15],$V4=[1,12],$V5=[1,13],$V6=[5,6],$V7=[5,6,30],$V8=[5,6,17],$V9=[1,31],$Va=[1,21],$Vb=[1,22],$Vc=[1,29],$Vd=[1,23],$Ve=[1,24],$Vf=[1,25],$Vg=[1,26],$Vh=[1,27],$Vi=[1,28],$Vj=[1,30],$Vk=[5,6,17,30],$Vl=[1,38],$Vm=[1,39],$Vn=[5,6,17,24,26,28,30,45,46,47,48,49,50,51,52,53,54,55,56,57],$Vo=[1,42],$Vp=[5,6,17,24,26,28,30,43,45,46,47,48,49,50,51,52,53,54,55,56,57],$Vq=[1,60],$Vr=[1,61],$Vs=[1,59],$Vt=[1,66],$Vu=[1,62],$Vv=[1,63],$Vw=[1,64],$Vx=[6,17],$Vy=[1,83],$Vz=[1,81],$VA=[1,82],$VB=[1,84],$VC=[1,85],$VD=[1,86],$VE=[1,87],$VF=[1,88],$VG=[1,89],$VH=[1,90],$VI=[1,91],$VJ=[1,92],$VK=[1,93],$VL=[17,28,45,46,47,48,49,50,51,52,53,54,55,56,57],$VM=[17,45,46,47,50,51,52,53,54,55,56,57],$VN=[17,28,45,46,47,48,50,51,52,53,54,55,56,57],$VO=[17,45,50,51,56,57],$VP=[17,45,50,51,52,53,54,55,56,57],$VQ=[1,129],$VR=[1,130],$VS=[1,131],$VT=[1,133],$VU=[1,134],$VV=[5,6,17,24,26];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"LQUERYS":4,"EOF":5,",":6,"QUERY":7,"MULTIPATH":8,"XQUERY":9,"cadena":10,"scadena":11,"RETURN":12,"LET":13,"return":14,"(":15,"LXQUERYS":16,")":17,"let":18,"$":19,"id":20,":=":21,"PATHXQUERY":22,"PATH":23,"/":24,"LACCESOSXQUERY":25,"//":26,"ACCESOXQUERY":27,"*":28,"@":29,"|":30,"LACCESOS":31,"ACCESO":32,".":33,"..":34,"text":35,"node":36,"child":37,"::":38,"descendant":39,"PREDICADOS":40,"attribute":41,"PREDI":42,"[":43,"EXP":44,"]":45,"+":46,"-":47,"div":48,"mod":49,"=":50,"!=":51,"<":52,"<=":53,">":54,">=":55,"and":56,"or":57,"VALOR":58,"number":59,"position":60,"last":61,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:",",10:"cadena",11:"scadena",14:"return",15:"(",17:")",18:"let",19:"$",20:"id",21:":=",24:"/",26:"//",28:"*",29:"@",30:"|",33:".",34:"..",35:"text",36:"node",37:"child",38:"::",39:"descendant",41:"attribute",43:"[",45:"]",46:"+",47:"-",48:"div",49:"mod",50:"=",51:"!=",52:"<",53:"<=",54:">",55:">=",56:"and",57:"or",59:"number",60:"position",61:"last"},
productions_: [0,[3,2],[3,1],[4,3],[4,1],[7,1],[7,1],[9,1],[9,1],[9,1],[9,1],[12,4],[12,2],[16,3],[16,1],[13,5],[13,5],[22,4],[22,4],[22,2],[25,3],[25,3],[25,1],[27,1],[27,1],[27,2],[27,2],[8,3],[8,1],[23,2],[23,2],[31,3],[31,3],[31,1],[32,1],[32,1],[32,1],[32,1],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,2],[32,4],[32,4],[32,4],[32,4],[32,2],[32,2],[32,3],[32,3],[32,3],[32,3],[32,4],[32,4],[32,1],[40,2],[40,1],[42,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,1],[58,3],[58,1],[58,1],[58,1],[58,3],[58,3],[58,1],[58,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
return $$[$0];
break;
case 3: case 13: case 27:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 4: case 14: case 22: case 28: case 33: case 60:
this.$ = [$$[$0]];
break;
case 5:
this.$ = new MultiXpaths(0, 0, $$[$0]);
break;
case 6: case 75:
this.$ = $$[$0];
break;
case 7: case 8: case 77: case 78:
this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], tipoPrimitivo.STRING);
break;
case 9: case 10:
this.$ = $$[$0]
break;
case 11:
this.$ = new Return (_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 12:
this.$ = new Return (_$[$0-1].first_line, _$[$0-1].first_column, [$$[$0]]);
break;
case 15:
$$[$0].accesos.tipoPath = 'sub'; this.$ = new Let(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0]);
break;
case 16:
this.$ = new Let(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0]);
break;
case 17:
$$[$0][0].tipoQuery = 'relativa';
                                                             this.$ = new XqueryPath(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], new Path(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0]));
break;
case 18:
$$[$0][0].tipoQuery = 'absoluta';
                                                             this.$ = new XqueryPath(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], new Path(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0]));
break;
case 19:
this.$ = new XqueryPath(_$[$0].first_line, _$[$0].first_column, $$[$0], new Path(_$[$0].first_line, _$[$0].first_column, []));
break;
case 20: case 21:
$$[$0].tipoQuery = 'relativa'; $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 23: case 34:
this.$ = new Acceso(_$[$0].first_line, _$[$0].first_column, $$[$0], 'nodo', []);
break;
case 24: case 35:
this.$ = new Acceso(_$[$0].first_line, _$[$0].first_column, $$[$0], 'todosNodos', []);
break;
case 25: case 50:
this.$ = new Acceso(_$[$0].first_line, _$[$0].first_column, $$[$0], 'atributo', []);
break;
case 26: case 51:
this.$ = new Acceso(_$[$0].first_line, _$[$0].first_column, $$[$0], 'todosAtributos', []);
break;
case 29:
if($$[$0][0].tipoQuery === undefined){$$[$0][0].tipoQuery = 'relativa';}
                                                     this.$ = new Path(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 30:
if($$[$0][0].tipoQuery === undefined){$$[$0][0].tipoQuery = 'absoluta';}  
                                                     this.$ = new Path(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 31:
if($$[$0].tipoQuery === undefined){$$[$0].tipoQuery = 'relativa'} $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 32:
if($$[$0].tipoQuery === undefined){$$[$0].tipoQuery = 'absoluta'} $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 36:
this.$ = new Acceso(_$[$0].first_line, _$[$0].first_column, $$[$0], 'actual', []);
break;
case 37:
this.$ = new Acceso(_$[$0].first_line, _$[$0].first_column, $$[$0], 'padre', []);
break;
case 38:
this.$ = new Acceso(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], 'texto', []);
break;
case 39:
this.$ = new Acceso(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], 'todosNodos', []);
break;
case 40:
this.$ = new Acceso(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0], 'nodo', []);
break;
case 41:
this.$ = new Acceso(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0], 'todosNodos', []);
break;
case 42:
this.$ = new Acceso(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0], 'nodo', [], 'absoluta');
break;
case 43:
this.$ = new Acceso(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0], 'todosNodos', [], 'absoluta');
break;
case 44:
this.$ = new Acceso(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], 'nodo', $$[$0]);
break;
case 45:
this.$ = new Acceso(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], 'todosNodos', $$[$0]);
break;
case 46:
this.$ = new Acceso(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], 'nodo', $$[$0]);
break;
case 47:
this.$ = new Acceso(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], 'todosNodos', $$[$0]);
break;
case 48:
this.$ = new Acceso(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], 'nodo', $$[$0], 'absoluta');
break;
case 49:
this.$ = new Acceso(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], 'todosNodos', $$[$0], 'absoluta');
break;
case 52:
this.$ = new Acceso(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0], 'atributo', []);
break;
case 53:
this.$ = new Acceso(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0], 'todosAtributos', []);
break;
case 54:
this.$ = new Acceso(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], 'atributo', $$[$0]);
break;
case 55:
this.$ = new Acceso(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], 'todosAtributos', $$[$0]);
break;
case 56:
this.$ = new Acceso(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], 'atributo', $$[$0]);
break;
case 57:
this.$ = new Acceso(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], 'todosAtributos', $$[$0]);
break;
case 58:
listaErrores.push(new ClaseError('Sintactico','Se esperaba la definicion de una etiqueta',_$[$0].first_line, _$[$0].first_column))
break;
case 59:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 61: case 76:
this.$ = $$[$0-1];
break;
case 62:
this.$ = new Aritmetico(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionAritmetica.SUMA, $$[$0-1]);
break;
case 63:
this.$ = new Aritmetico(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionAritmetica.RESTA, $$[$0-1]);
break;
case 64:
this.$ = new Aritmetico(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionAritmetica.MULT, $$[$0-1]);
break;
case 65:
this.$ = new Aritmetico(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionAritmetica.DIV, $$[$0-1]);
break;
case 66:
this.$ = new Aritmetico(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionAritmetica.MOD, $$[$0-1]);
break;
case 67:
this.$ = new Relacional(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionRelacional.IGUAL, $$[$0-1]);
break;
case 68:
this.$ = new Relacional(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionRelacional.DIFERENCIACION, $$[$0-1]);
break;
case 69:
this.$ = new Relacional(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionRelacional.MENOR, $$[$0-1]);
break;
case 70:
this.$ = new Relacional(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionRelacional.MENORIGUAL, $$[$0-1]);
break;
case 71:
this.$ = new Relacional(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionRelacional.MAYOR, $$[$0-1]);
break;
case 72:
this.$ = new Relacional(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionRelacional.MAYORIGUAL, $$[$0-1]);
break;
case 73:
this.$ = new Logica(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionLogica.AND, $$[$0-1]);
break;
case 74:
this.$ = new Logica(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionLogica.OR, $$[$0-1]);
break;
case 79:
this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], tipoPrimitivo.NUMBER);
break;
case 80: case 81:
this.$ = new Primitivo(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2]);
break;
case 82:
if($$[$0][0].tipoQuery === undefined){$$[$0][0].tipoQuery = 'relativa';}
                                 this.$ = new Path(_$[$0].first_line, _$[$0].first_column, $$[$0], 'sub');
break;
case 83:
if($$[$0][0].tipoQuery === undefined){$$[$0][0].tipoQuery ='relativa';}
                                 this.$ = new Path(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0], 'sub');
break;
}
},
table: [{3:1,4:2,5:[1,3],7:4,8:5,9:6,10:$V0,11:$V1,12:10,13:11,14:$V2,18:$V3,23:7,24:$V4,26:$V5},{1:[3]},{5:[1,16],6:[1,17]},{1:[2,2]},o($V6,[2,4]),o($V6,[2,5],{30:[1,18]}),o($V6,[2,6]),o($V7,[2,28]),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),{2:$V9,20:$Va,28:$Vb,29:$Vc,31:19,32:20,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,39:$Vi,41:$Vj},{2:$V9,20:$Va,28:$Vb,29:$Vc,31:32,32:20,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,39:$Vi,41:$Vj},{9:34,10:$V0,11:$V1,12:10,13:11,14:$V2,15:[1,33],18:$V3},{19:[1,35]},{1:[2,1]},{7:36,8:5,9:6,10:$V0,11:$V1,12:10,13:11,14:$V2,18:$V3,23:7,24:$V4,26:$V5},{23:37,24:$V4,26:$V5},o($Vk,[2,29],{24:$Vl,26:$Vm}),o($Vn,[2,33]),o($Vn,[2,34],{40:40,42:41,43:$Vo}),o($Vn,[2,35],{42:41,40:43,43:$Vo}),o($Vn,[2,36]),o($Vn,[2,37]),{15:[1,44]},{15:[1,45]},{38:[1,46]},{38:[1,47]},{20:[1,48],28:[1,49]},{38:[1,50]},o($Vn,[2,58]),o($Vk,[2,30],{24:$Vl,26:$Vm}),{9:52,10:$V0,11:$V1,12:10,13:11,14:$V2,16:51,18:$V3},o($V8,[2,12]),{20:[1,53]},o($V6,[2,3]),o($V7,[2,27]),{2:$V9,20:$Va,28:$Vb,29:$Vc,32:54,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,39:$Vi,41:$Vj},{2:$V9,20:$Va,28:$Vb,29:$Vc,32:55,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,39:$Vi,41:$Vj},o($Vn,[2,44],{42:56,43:$Vo}),o($Vp,[2,60]),{2:$V9,10:$Vq,11:$Vr,15:$Vs,20:$Va,26:$Vt,28:$Vb,29:$Vc,31:65,32:20,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,39:$Vi,41:$Vj,44:57,58:58,59:$Vu,60:$Vv,61:$Vw},o($Vn,[2,45],{42:56,43:$Vo}),{17:[1,67]},{17:[1,68]},{20:[1,69],28:[1,70]},{20:[1,71],28:[1,72]},o($Vn,[2,50],{42:41,40:73,43:$Vo}),o($Vn,[2,51],{42:41,40:74,43:$Vo}),{20:[1,75],28:[1,76]},{6:[1,78],17:[1,77]},o($Vx,[2,14]),{21:[1,79]},o($Vn,[2,31]),o($Vn,[2,32]),o($Vp,[2,59]),{28:$Vy,45:[1,80],46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK},o($VL,[2,75]),{2:$V9,10:$Vq,11:$Vr,15:$Vs,20:$Va,26:$Vt,28:$Vb,29:$Vc,31:65,32:20,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,39:$Vi,41:$Vj,44:94,58:58,59:$Vu,60:$Vv,61:$Vw},o($VL,[2,77]),o($VL,[2,78]),o($VL,[2,79]),{15:[1,95]},{15:[1,96]},o($VL,[2,82],{24:$Vl,26:$Vm}),{2:$V9,20:$Va,28:$Vb,29:$Vc,31:97,32:20,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,39:$Vi,41:$Vj},o($Vn,[2,38]),o($Vn,[2,39]),o($Vn,[2,40],{42:41,40:98,43:$Vo}),o($Vn,[2,41],{42:41,40:99,43:$Vo}),o($Vn,[2,42],{42:41,40:100,43:$Vo}),o($Vn,[2,43],{42:41,40:101,43:$Vo}),o($Vn,[2,54],{42:56,43:$Vo}),o($Vn,[2,55],{42:56,43:$Vo}),o($Vn,[2,52],{42:41,40:102,43:$Vo}),o($Vn,[2,53],{42:41,40:103,43:$Vo}),o($V8,[2,11]),{9:104,10:$V0,11:$V1,12:10,13:11,14:$V2,18:$V3},{19:[1,107],22:105,23:106,24:$V4,26:$V5},o($Vp,[2,61]),{2:$V9,10:$Vq,11:$Vr,15:$Vs,20:$Va,26:$Vt,28:$Vb,29:$Vc,31:65,32:20,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,39:$Vi,41:$Vj,44:108,58:58,59:$Vu,60:$Vv,61:$Vw},{2:$V9,10:$Vq,11:$Vr,15:$Vs,20:$Va,26:$Vt,28:$Vb,29:$Vc,31:65,32:20,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,39:$Vi,41:$Vj,44:109,58:58,59:$Vu,60:$Vv,61:$Vw},{2:$V9,10:$Vq,11:$Vr,15:$Vs,20:$Va,26:$Vt,28:$Vb,29:$Vc,31:65,32:20,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,39:$Vi,41:$Vj,44:110,58:58,59:$Vu,60:$Vv,61:$Vw},{2:$V9,10:$Vq,11:$Vr,15:$Vs,20:$Va,26:$Vt,28:$Vb,29:$Vc,31:65,32:20,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,39:$Vi,41:$Vj,44:111,58:58,59:$Vu,60:$Vv,61:$Vw},{2:$V9,10:$Vq,11:$Vr,15:$Vs,20:$Va,26:$Vt,28:$Vb,29:$Vc,31:65,32:20,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,39:$Vi,41:$Vj,44:112,58:58,59:$Vu,60:$Vv,61:$Vw},{2:$V9,10:$Vq,11:$Vr,15:$Vs,20:$Va,26:$Vt,28:$Vb,29:$Vc,31:65,32:20,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,39:$Vi,41:$Vj,44:113,58:58,59:$Vu,60:$Vv,61:$Vw},{2:$V9,10:$Vq,11:$Vr,15:$Vs,20:$Va,26:$Vt,28:$Vb,29:$Vc,31:65,32:20,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,39:$Vi,41:$Vj,44:114,58:58,59:$Vu,60:$Vv,61:$Vw},{2:$V9,10:$Vq,11:$Vr,15:$Vs,20:$Va,26:$Vt,28:$Vb,29:$Vc,31:65,32:20,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,39:$Vi,41:$Vj,44:115,58:58,59:$Vu,60:$Vv,61:$Vw},{2:$V9,10:$Vq,11:$Vr,15:$Vs,20:$Va,26:$Vt,28:$Vb,29:$Vc,31:65,32:20,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,39:$Vi,41:$Vj,44:116,58:58,59:$Vu,60:$Vv,61:$Vw},{2:$V9,10:$Vq,11:$Vr,15:$Vs,20:$Va,26:$Vt,28:$Vb,29:$Vc,31:65,32:20,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,39:$Vi,41:$Vj,44:117,58:58,59:$Vu,60:$Vv,61:$Vw},{2:$V9,10:$Vq,11:$Vr,15:$Vs,20:$Va,26:$Vt,28:$Vb,29:$Vc,31:65,32:20,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,39:$Vi,41:$Vj,44:118,58:58,59:$Vu,60:$Vv,61:$Vw},{2:$V9,10:$Vq,11:$Vr,15:$Vs,20:$Va,26:$Vt,28:$Vb,29:$Vc,31:65,32:20,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,39:$Vi,41:$Vj,44:119,58:58,59:$Vu,60:$Vv,61:$Vw},{2:$V9,10:$Vq,11:$Vr,15:$Vs,20:$Va,26:$Vt,28:$Vb,29:$Vc,31:65,32:20,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:$Vh,39:$Vi,41:$Vj,44:120,58:58,59:$Vu,60:$Vv,61:$Vw},{17:[1,121],28:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK},{17:[1,122]},{17:[1,123]},o($VL,[2,83],{24:$Vl,26:$Vm}),o($Vn,[2,46],{42:56,43:$Vo}),o($Vn,[2,47],{42:56,43:$Vo}),o($Vn,[2,48],{42:56,43:$Vo}),o($Vn,[2,49],{42:56,43:$Vo}),o($Vn,[2,56],{42:56,43:$Vo}),o($Vn,[2,57],{42:56,43:$Vo}),o($Vx,[2,13]),o($V8,[2,15]),o($V8,[2,16]),{20:[1,124]},o($VM,[2,62],{28:$Vy,48:$VB,49:$VC}),o($VM,[2,63],{28:$Vy,48:$VB,49:$VC}),o($VN,[2,64],{49:$VC}),o($VN,[2,65],{49:$VC}),o($VL,[2,66]),o($VO,[2,67],{28:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,52:$VF,53:$VG,54:$VH,55:$VI}),o($VO,[2,68],{28:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,52:$VF,53:$VG,54:$VH,55:$VI}),o($VP,[2,69],{28:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC}),o($VP,[2,70],{28:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC}),o($VP,[2,71],{28:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC}),o($VP,[2,72],{28:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC}),o([17,45,56,57],[2,73],{28:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI}),o([17,45,57],[2,74],{28:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ}),o($VL,[2,76]),o($VL,[2,80]),o($VL,[2,81]),o($V8,[2,19],{24:[1,125],26:[1,126]}),{20:$VQ,25:127,27:128,28:$VR,29:$VS},{20:$VQ,25:132,27:128,28:$VR,29:$VS},o($V8,[2,17],{24:$VT,26:$VU}),o($VV,[2,22]),o($VV,[2,23]),o($VV,[2,24]),{20:[1,135],28:[1,136]},o($V8,[2,18],{24:$VT,26:$VU}),{20:$VQ,27:137,28:$VR,29:$VS},{20:$VQ,27:138,28:$VR,29:$VS},o($VV,[2,25]),o($VV,[2,26]),o($VV,[2,20]),o($VV,[2,21])],
defaultActions: {3:[2,2],16:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Acceso} = require("../xqueryAST/ExpresionesXpath/Acceso");
    const {Aritmetico, operacionAritmetica} = require("../xqueryAST/ExpresionesXpath/Aritmetico");
    const {Logica, operacionLogica} = require("../xqueryAST/ExpresionesXpath/Logica");
    const {Path} = require("../xqueryAST/ExpresionesXpath/Path");
    const {Primitivo, tipoPrimitivo} = require("../xqueryAST/ExpresionesXpath/Primitivo");
    const {Relacional, operacionRelacional} = require("../xqueryAST/ExpresionesXpath/Relacional");
    const {ClaseError} = require("../xmlAST/ClaseError");

    const {Let} = require("../xqueryAST/ExpresionesXquery/Let");
    const {MultiXpaths} = require("../xqueryAST/ExpresionesXquery/MultiXpaths");
    const {Return} = require("../xqueryAST/ExpresionesXquery/Return");
    const {XqueryPath} = require("../xqueryAST/ExpresionesXquery/XqueryPath");
    
    
    var listaErrores = [];
    var tmp="";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.begin('string'); tmp=""; 
break;
case 1:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 2:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 3:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 4:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 5:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 6: tmp= tmp+yy_.yytext;   this.begin('string');
break;
case 7:
                    this.begin('INITIAL');
                    yy_.yytext= tmp;
                    tmp = "";
                    return 10;
                  
break;
case 8:this.begin('string'); tmp=""; 
break;
case 9:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 10:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 11:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 12:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 13:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 14: tmp= tmp+yy_.yytext;   this.begin('string');
break;
case 15:
                    this.begin('INITIAL');
                    yy_.yytext= tmp;
                    tmp = "";
                    return 11;
                  
break;
case 16:return 26
break;
case 17:return 24
break;
case 18:return 34
break;
case 19:return 33
break;
case 20:return 29
break;
case 21:return 43
break;
case 22:return 45
break;
case 23:return 15
break;
case 24:return 17
break;
case 25:
break;
case 26:return 30
break;
case 27:return 46
break;
case 28:return 47
break;
case 29:return 28
break;
case 30:return 48
break;
case 31:return 50
break;
case 32:return 51
break;
case 33:return 53
break;
case 34:return 55
break;
case 35:return 52
break;
case 36:return 54
break;
case 37:return 57
break;
case 38:return 56
break;
case 39:return 49
break;
case 40:return 38
break;
case 41:return 37
break;
case 42:return 41
break;
case 43:return 39
break;
case 44:return 35
break;
case 45:return 61 
break;
case 46:return 60
break;
case 47:return 14;
break;
case 48:return 19;
break;
case 49:return 18;
break;
case 50:return 21;
break;
case 51:return 59
break;
case 52:return 20
break;
case 53:return 5
break;
case 54:console.log('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:["])/i,/^(?:[^"])/i,/^(?:[\\][n])/i,/^(?:[\\][t])/i,/^(?:[\\][r])/i,/^(?:[\\]["])/i,/^(?:[\\][\\])/i,/^(?:[\"])/i,/^(?:['])/i,/^(?:[^'])/i,/^(?:[\\][n])/i,/^(?:[\\][t])/i,/^(?:[\\][r])/i,/^(?:[\\]['])/i,/^(?:[\\][\\])/i,/^(?:[\'])/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:@)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:[" "]+)/i,/^(?:\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:div\b)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:mod\b)/i,/^(?:::)/i,/^(?:child\b)/i,/^(?:attribute\b)/i,/^(?:descendant\b)/i,/^(?:text\b)/i,/^(?:last\b)/i,/^(?:position\b)/i,/^(?:return\b)/i,/^(?:\$)/i,/^(?:let\b)/i,/^(?::=)/i,/^(?:[0-9]+)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[1,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true},"INITIAL":{"rules":[0,8,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xQueryGrammar;
exports.Parser = xQueryGrammar.Parser;
exports.parse = function () { return xQueryGrammar.parse.apply(xQueryGrammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}